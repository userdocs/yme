"use strict";(self.webpackChunkqbt_static_docs=self.webpackChunkqbt_static_docs||[]).push([[234],{3905:(t,e,n)=>{n.d(e,{Zo:()=>c,kt:()=>d});var a=n(7294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function l(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},i=Object.keys(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var s=a.createContext({}),p=function(t){var e=a.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):o(o({},e),t)),n},c=function(t){var e=p(t.components);return a.createElement(s.Provider,{value:e},t.children)},u="mdxType",h={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},b=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,i=t.originalType,s=t.parentName,c=l(t,["components","mdxType","originalType","parentName"]),u=p(n),b=r,d=u["".concat(s,".").concat(b)]||u[b]||h[b]||i;return n?a.createElement(d,o(o({ref:e},c),{},{components:n})):a.createElement(d,o({ref:e},c))}));function d(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var i=n.length,o=new Array(i);o[0]=b;var l={};for(var s in e)hasOwnProperty.call(e,s)&&(l[s]=e[s]);l.originalType=t,l[u]="string"==typeof t?t:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},393:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const i={title:"Patching",hide_title:!0},o=void 0,l={unversionedId:"patching",id:"patching",title:"Patching",description:"Patching info",source:"@site/docs/patching.md",sourceDirName:".",slug:"/patching",permalink:"/yme/docs/patching",draft:!1,editUrl:"https://github.com/userdocs/qbittorrent-nox-static/tree/master/docs/patching.md",tags:[],version:"current",frontMatter:{title:"Patching",hide_title:!0},sidebar:"qtb_sidebar",previous:{title:"Build Help",permalink:"/yme/docs/build-help"},next:{title:"Debugging",permalink:"/yme/docs/debugging"}},s={},p=[{value:"Patching info",id:"patching-info",level:2},{value:"Local patching via boot strapping",id:"local-patching-via-boot-strapping",level:3},{value:"Using custom qBittorrent and libtorrent tags",id:"using-custom-qbittorrent-and-libtorrent-tags",level:3},{value:"Git based patching",id:"git-based-patching",level:2},{value:"How to make a patch",id:"how-to-make-a-patch",level:3},{value:"Using a Github pull request or commit",id:"using-a-github-pull-request-or-commit",level:3}],c=(u="Advanced",function(t){return console.warn("Component "+u+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)});var u;const h={toc:p},b="wrapper";function d(t){let{components:e,...n}=t;return(0,r.kt)(b,(0,a.Z)({},h,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)(c,{mdxType:"Advanced"}),(0,r.kt)("h2",{id:"patching-info"},"Patching info"),(0,r.kt)("p",null,"The script supports the automatic patching of libtorrent and qbittorrent when building, providing certain conditions are met. You can do it in two ways, local or via a GitHub repo. Let's take a look at these methods."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"[!tip|iconVisibility:hidden|labelVisibility:hidden|style:callout]"," Use the help command to get more infomation"),(0,r.kt)("pre",{parentName:"blockquote"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"bash ~/qbittorrent-nox-static.sh -h-pr\n"))),(0,r.kt)("h3",{id:"local-patching-via-boot-strapping"},"Local patching via boot strapping"),(0,r.kt)("p",null,"Here we will look bootstrapping the build process to make patching simple"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"[!note|iconVisibility:hidden|labelVisibility:hidden|style:callout]"," Using this command:"),(0,r.kt)("pre",{parentName:"blockquote"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"bash ~/qbittorrent-nox-static.sh -bs\n")),(0,r.kt)("p",{parentName:"blockquote"},"the script will create the required directory structure using the current defaults.")),(0,r.kt)("p",null,"The directory structure that will be created will look like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"qbt-build/patches/qbittorrent/4.5.0\nqbt-build/patches/libtorrent/v1.2.18\n")),(0,r.kt)("p",null,"Place your patch file named ",(0,r.kt)("inlineCode",{parentName:"p"},"patch")," inside the relevant directories. So it would look something like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"qbt-build/patches/qbittorrent/4.5.0/patch\nqbt-build/patches/libtorrent/v1.2.18/patch\n")),(0,r.kt)("p",null,"Then the patch file will be automatically matched to the tag used by the script and loaded."),(0,r.kt)("h3",{id:"using-custom-qbittorrent-and-libtorrent-tags"},"Using custom qBittorrent and libtorrent tags"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"[!tip|iconVisibility:hidden|labelVisibility:hidden|style:callout]"," Using custom qBittorrent and libtorrent tags")),(0,r.kt)("p",null,"You can change the defaults by using the ",(0,r.kt)("inlineCode",{parentName:"p"},"qt")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"lt")," switches to specify a tag. So for example if you used this command:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"bash ~/qbittorrent-nox-static.sh -qt master -lt RC_2_0 -bs")),(0,r.kt)("p",null,"The boot strapped directory structure will look like this instead:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"qbt-build/patches/qbittorrent/master\nqbt-build/patches/libtorrent/RC_2_0\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"[!warning|iconVisibility:hidden|labelVisibility:hidden|style:callout]"," Remember to provide the same tags when using the build command or the patches won't match the defaults.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"bash ~/qbittorrent-nox-static.sh -qt master -lt RC_2_0 all\n")),(0,r.kt)("h2",{id:"git-based-patching"},"Git based patching"),(0,r.kt)("p",null,"Instead of a local patch you can use github hosted patch files. Your patches need to be hosted in the root of the repo like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"patches/qbittorrent/master/patch\npatches/qbittorrent/4.5.0/patch\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"patches/libtorrent/RC_2_0/patch\npatches/libtorrent/RC_1_2/patch\npatches/libtorrent/v1.2.12/patch\n")),(0,r.kt)("p",null,"The all you do is use the ",(0,r.kt)("inlineCode",{parentName:"p"},"pr")," switch when using the script. The repo URL is abbreviated to your username and repo:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"bash ~/qbittorrent-nox-static.sh all -pr username/repo")),(0,r.kt)("p",null,"Then the patch file will be automatically matched to the tag used by the script and loaded."),(0,r.kt)("h3",{id:"how-to-make-a-patch"},"How to make a patch"),(0,r.kt)("p",null,"Using qbittorrent as an example we will edit the ",(0,r.kt)("inlineCode",{parentName:"p"},"src/base/bittorrent/session.cpp")," to apply some session defaults."),(0,r.kt)("p",null,"Download the relevant git repo:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git clone --no-tags --single-branch --branch release-4.5.0 --shallow-submodules --recurse-submodules --depth 1 https://github.com/qbittorrent/qBittorrent.git\n")),(0,r.kt)("p",null,"Copy the file that we need to edit to our home directory."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cp qBittorrent/src/base/bittorrent/session.cpp ~/session.cpp\n")),(0,r.kt)("p",null,"Now edit the ",(0,r.kt)("inlineCode",{parentName:"p"},"~/session.cpp"),". Once you have finished making your changes you can create a patch file using this command"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"diff -Naru qBittorrent/src/base/bittorrent/session.cpp ~/session.cpp > ~/patch\n")),(0,r.kt)("p",null,"Then you place that patch file in the matching tag directory."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"patches/qbittorrent/4.3.4.1/patch\n")),(0,r.kt)("h3",{id:"using-a-github-pull-request-or-commit"},"Using a Github pull request or commit"),(0,r.kt)("p",null,"First, it's sensible to make sure the patch that we want to use is from a pull request on the same branch that we are building against. So when using ",(0,r.kt)("inlineCode",{parentName:"p"},"release-4.5.0")," we should use ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/qbittorrent/qBittorrent/tree/v4_5_x"},"https://github.com/qbittorrent/qBittorrent/tree/v4_5_x")),(0,r.kt)("p",null,"You can see the branches for qBittorrent here - ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/qbittorrent/qBittorrent/branches"},"https://github.com/qbittorrent/qBittorrent/branches")),(0,r.kt)("p",null,"When you are on a commit or pull request you simply add ",(0,r.kt)("inlineCode",{parentName:"p"},".patch")," to the end of the url."),(0,r.kt)("p",null,"So here we take the pull request or commit URL"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/qbittorrent/qBittorrent/pull/18271"},"https://github.com/qbittorrent/qBittorrent/pull/18271")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/qbittorrent/qBittorrent/commit/c924904308e806db6e1b321da18c1f91c4e8f8bf"},"https://github.com/qbittorrent/qBittorrent/commit/c924904308e806db6e1b321da18c1f91c4e8f8bf")),(0,r.kt)("p",null,"and add ",(0,r.kt)("inlineCode",{parentName:"p"},".patch")," to it so it becomes this"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/qbittorrent/qBittorrent/pull/18271.patch"},"https://github.com/qbittorrent/qBittorrent/pull/18271.patch")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/qbittorrent/qBittorrent/commit/c924904308e806db6e1b321da18c1f91c4e8f8bf.patch"},"https://github.com/qbittorrent/qBittorrent/commit/c924904308e806db6e1b321da18c1f91c4e8f8bf.patch")),(0,r.kt)("p",null,"You can download these using ",(0,r.kt)("inlineCode",{parentName:"p"},"curl")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"wget")," and use these as patches in custom builds."))}d.isMDXComponent=!0}}]);