"use strict";(self.webpackChunkqbt_static_docs=self.webpackChunkqbt_static_docs||[]).push([[495],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>y});var r=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var i=r.createContext({}),c=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(i.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,a=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(n),d=s,y=p["".concat(i,".").concat(d)]||p[d]||m[d]||a;return n?r.createElement(y,o(o({ref:t},u),{},{components:n})):r.createElement(y,o({ref:t},u))}));function y(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var a=n.length,o=new Array(a);o[0]=d;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[p]="string"==typeof e?e:s,o[1]=l;for(var c=2;c<a;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5959:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>y,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=n(7462),s=(n(7294),n(3905));const a={title:"Systemd",hide_title:!0},o=void 0,l={unversionedId:"systemd",id:"systemd",title:"Systemd",description:"Systemd service",source:"@site/docs/systemd.md",sourceDirName:".",slug:"/systemd",permalink:"/yme/docs/systemd",draft:!1,editUrl:"https://github.com/userdocs/qbittorrent-nox-static/tree/master/docs/systemd.md",tags:[],version:"current",frontMatter:{title:"Systemd",hide_title:!0},sidebar:"qtb_sidebar",previous:{title:"Nginx proxy",permalink:"/yme/docs/nginx-proxypass"},next:{title:"Github Actions",permalink:"/yme/docs/github-actions"}},i={},c=[{value:"Systemd service",id:"systemd-service",level:3},{value:"Systemd user service",id:"systemd-user-service",level:3}],u=(p="Advanced",function(e){return console.warn("Component "+p+" was not imported, exported, or provided by MDXProvider as global scope"),(0,s.kt)("div",e)});var p;const m={toc:c},d="wrapper";function y(e){let{components:t,...n}=e;return(0,s.kt)(d,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)(u,{mdxType:"Advanced"}),(0,s.kt)("h3",{id:"systemd-service"},"Systemd service"),(0,s.kt)("p",null,"Location for the systemd service file:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"/etc/systemd/system/qbittorrent.service\n")),(0,s.kt)("p",null,"Modify the path to the binary and your local username."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ini"},"[Unit]\nDescription=qBittorrent-nox service\nWants=network-online.target\nAfter=network-online.target nss-lookup.target\n\n[Service]\nType=exec\nUser=qbtuser\nExecStart=/usr/local/bin/qbittorrent-nox\nRestart=on-failure\nSyslogIdentifier=qbittorrent-nox\n\n[Install]\nWantedBy=multi-user.target\n")),(0,s.kt)("p",null,"After any changes to the services reload using this command."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"systemctl daemon-reload\n")),(0,s.kt)("p",null,"Now you can enable the service"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"systemctl enable --now qbittorrent.service\n")),(0,s.kt)("p",null,"Now you can use these commands"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"systemctl stop qbittorrent\nsystemctl start qbittorrent\nsystemctl restart qbittorrent\n")),(0,s.kt)("h3",{id:"systemd-user-service"},"Systemd user service"),(0,s.kt)("p",null,"You can also use a local systemd service."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"~/.config/systemd/user/qbittorrent.service\n")),(0,s.kt)("p",null,"You can use this configuration with no modification required."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ini"},"[Unit]\nDescription=qbittorrent\nWants=network-online.target\nAfter=network-online.target nss-lookup.target\n\n[Service]\nType=exec\nExecStart=%h/bin/qbittorrent-nox\nRestart=on-failure\nSyslogIdentifier=qbittorrent-nox\n\n[Install]\nWantedBy=default.target\n")),(0,s.kt)("p",null,"After any changes to the services reload using this command."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"systemctl --user daemon-reload\n")),(0,s.kt)("p",null,"Now you can enable the service"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"systemctl --user enable --now qbittorrent\n")),(0,s.kt)("p",null,"Now you can use these commands"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"systemctl --user stop qbittorrent\nsystemctl --user start qbittorrent\nsystemctl --user restart qbittorrent\n")))}y.isMDXComponent=!0}}]);